qualys-jira-kustomize/
│
├── base/
│   ├── kustomization.yml
│   ├── secrets.yml
│   ├── configmap.yml
│   ├── redis-statefulset.yml
│   ├── qualys-deployment.yml
│   ├── service.yml
│   └── ingress.yml
│
└── overlays/
    └── dev/
        ├── kustomization.yml

# ==========================
#  kustomization.yaml (base)
# ==========================
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
  - secrets.yaml
  - configmap.yaml
  - redis-statefulset.yaml
  - qualys-deployment.yaml
  - service.yaml
  - ingress.yaml

  # ==========================
#  secrets.yaml (base)
# ==========================
apiVersion: v1
kind: Secret
metadata:
  name: qualys-jira-secrets
  namespace: security
type: Opaque
stringData:  # Use stringData to allow raw strings (not base64 encoded)
  QUALYS_API_URL: "https://qualysapi.gql.apps.qualys.com.au"
  QUALYS_USERNAME: "mbanksa"
  QUALYS_PASSWORD: ""

  JIRA_URL: "https://in1bank-ltd.atlassian.net"
  JIRA_USERNAME: ""
  JIRA_API_TOKEN: ""

  # Redis Configuration
  SPRING_REDIS_HOST: "redis-dev.security.svc.cluster.local"
  SPRING_REDIS_PORT: "6379"
  SPRING_REDIS_PASSWORD: "RedisRedisPassword"  # Example password, replace with actual

  # Proxy configuration, if used:
  PROXY_HOST: "host"
  PROXY_PORT: "null"
  PROXY_USERNAME: "null"
  PROXY_PASSWORD: "null"

# ==========================
#  configmap.yaml (base)
# ==========================
apiVersion: v1
kind: ConfigMap
metadata:
  name: qualys-jira-config
  namespace: security
data:
  config.json: |
    {
      "credentials": {
        "qualys": {
          "apiUrl": "${QUALYS_API_URL}",
          "username": "${QUALYS_USERNAME}",
          "password": "${QUALYS_PASSWORD}"
        },
        "jira": {
          "instanceUrl": "${JIRA_URL}",
          "username": "${JIRA_USERNAME}",
          "apiToken": "${JIRA_API_TOKEN}"
        },
        "proxy": {
          "host": "${PROXY_HOST}",
          "port": ${PROXY_PORT},
          "username": "${PROXY_USERNAME}",
          "password": "${PROXY_PASSWORD}"
        }
      },
      "redis": {
        "host": "${SPRING_REDIS_HOST}",
        "port": "${SPRING_REDIS_PORT}",
        "password": "${SPRING_REDIS_PASSWORD}"
      },
      "profile": [
        {
          "profileId": "HD",
          "name": "Host Detection",
          "active": true,
          "frequencyInMinutes": 5,
          "filter": "",
          "projectKey": "CVES",
          "ticketingScheme": 1,
          "batchSize": null,
          "hostAssetApiFilter": null,
          "pageSize": null,
          "jiraTicketAction": null,
          "logLevel": "INFO",
          "createTicketsOnlyForRunningContainer": false
        },
        {
          "profileId": "KB",
          "name": "KnowledgeBase",
          "active": true,
          "frequencyInMinutes": 5,
          "filter": "",
          "projectKey": "CVES",
          "ticketingScheme": 1,
          "batchSize": 500,
          "hostAssetApiFilter": null,
          "pageSize": null,
          "jiraTicketAction": null,
          "logLevel": "INFO",
          "createTicketsOnlyForRunningContainer": false
        }
        # Add other profiles as needed
      ],
      "global": {
        "numberOfThreadsForJiraClient": 0,
        "numberOfRetriesForJiraApiCall": 3,
        "numberOfRetriesForQualysApiCall": 3,
        "responseTimeout": 5,
        "frequencyToProcessOutPutFiles": 5
      },
      "moduleConfiguration": {
        "HD": {
          "numberOfConcurrentTask": 2
        },
        "WAS": {
          "numberOfConcurrentTask": 2
        },
        "CS-Container": {
          "numberOfConcurrentTask": 2
        },
        "CS-Image": {
          "numberOfConcurrentTask": 2
        }
      }
    }

  REDIS_CONF: |
    bind 0.0.0.0
    port 6379
    requirepass ${SPRING_REDIS_PASSWORD}
    appendonly yes


# ==========================
#  redis-statefulset.yaml (base)
# ==========================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-qualys-jira-connector
  namespace: security
spec:
  serviceName: "redis"
  replicas: 1
  selector:
    matchLabels:
      app: redis-qualys-jira-connector
  template:
    metadata:
      labels:
        app: redis-qualys-jira-connector
    spec:
      containers:
      - name: redis
        image: redis:6.2.6  # Use the Redis version you need
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: SPRING_REDIS_PASSWORD
        command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--requirepass", "$(REDIS_PASSWORD)"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config-volume
          mountPath: /usr/local/etc/redis/redis.conf
          subPath: redis.conf
      volumes:
      - name: redis-data
        emptyDir: {}  # Use PersistentVolumeClaim for persistent storage
      - name: redis-config-volume
        configMap:
          name: qualys-jira-config
          items:
            - key: REDIS_CONF
              path: redis.conf

# ==========================
#  qualys-deployment.yaml (base)
# ==========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qualys-jira-connector
  namespace: security
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qualys-jira-connector
  template:
    metadata:
      labels:
        app: qualys-jira-connector
    spec:
      containers:
      - name: qualys-jira-connector
        image: qualys/qualys-client-for-jira-integration:1.3.2
        env:
        - name: QUALYS_API_URL
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: QUALYS_API_URL
        - name: QUALYS_USERNAME
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: QUALYS_USERNAME
        - name: QUALYS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: QUALYS_PASSWORD
        - name: JIRA_URL
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: JIRA_URL
        - name: JIRA_USERNAME
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: JIRA_USERNAME
        - name: JIRA_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: JIRA_API_TOKEN
        - name: SPRING_REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: SPRING_REDIS_HOST
        - name: SPRING_REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: SPRING_REDIS_PORT
        - name: SPRING_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qualys-jira-secrets
              key: SPRING_REDIS_PASSWORD
        volumeMounts:
        - name: config-volume
          mountPath: /etc/qualys/config.json
          subPath: config.json
      volumes:
      - name: config-volume
        configMap:
          name: qualys-jira-config
          items:
            - key: config.json
              path: config.json


# ==========================
#  service.yaml (base)
# ==========================
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: security
spec:
  ports:
  - port: 6379
    name: redis
  clusterIP: None  # Headless service, no load balancing
  selector:
    app: qualys-jira-connector

---
apiVersion: v1
kind: Service
metadata:
  name: qualys-jira-connector
  namespace: security
spec:
  selector:
    app: qualys-jira-connector
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP  # Expose Qualys Jira connector within the cluster



# ==========================
#  ingress.yaml (base)
# ==========================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qualys-jira-ingress
  namespace: security
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: jira-connector.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: qualys-jira-connector
            port:
              number: 8080



# ==========================
#  kustomization.yaml (overlays/dev)
# ==========================
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

labels:
  environment: dev

namespace: security

# Reference remote resources
resources:
  - git::https://gitlab.com/your-repo/your-base-config.git//path/to/base?ref=branch-name
  - git::https://gitlab.com/your-repo/another-base-config.git//path/to/another-base?ref=branch-name

# Reference remote components
components:
  - git::https://gitlab.com/your-repo/your-component-config.git//path/to/component?ref=branch-name
  - git::https://gitlab.com/your-repo/another-component-config.git//path/to/another-component?ref=branch-name





