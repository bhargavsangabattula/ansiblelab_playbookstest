---
- name: Check and apply RDS pending maintenance with scheduled time and email alerts
  hosts: localhost
  gather_facts: false

  vars:
    rds_instance_id: "your-rds-instance-id"
    aws_region: "your-aws-region"
    email_recipients: "recipient@example.com"
    email_sender: "sender@example.com"
    email_smtp_server: "smtp.example.com"
    email_smtp_port: 587
    email_subject_prefix: "[RDS Maintenance Notification]"
    scheduled_time: "2024-08-19 02:45:00"  # Set the scheduled time in UTC

  tasks:
    - name: Check for pending maintenance actions
      aws_rds_info:
        db_instance_identifier: "{{ rds_instance_id }}"
        region: "{{ aws_region }}"
      register: rds_info

    - name: Extract pending maintenance actions
      set_fact:
        pending_maintenance: "{{ rds_info.db_instances[0].pending_modified_values | default([]) }}"

    - name: Send email alert before applying maintenance
      mail:
        host: "{{ email_smtp_server }}"
        port: "{{ email_smtp_port }}"
        from: "{{ email_sender }}"
        to: "{{ email_recipients }}"
        subject: "{{ email_subject_prefix }} Pending RDS Maintenance on {{ rds_instance_id }}"
        body: |
          The following pending maintenance actions were found for RDS instance {{ rds_instance_id }}:
          {{ pending_maintenance | to_nice_json }}
          
          The maintenance is scheduled to be applied at {{ scheduled_time }} (UTC).
      when: pending_maintenance | length > 0

    - name: Wait until the scheduled time before applying maintenance
      when: pending_maintenance | length > 0
      wait_for:
        timeout: "{{ (ansible_date_time.iso8601 | to_datetime('%Y-%m-%dT%H:%M:%SZ') | diff(scheduled_time | to_datetime('%Y-%m-%d %H:%M:%S'))).total_seconds() | int }}"
        state: present
      delegate_to: localhost

    - name: Apply pending maintenance if available
      when: pending_maintenance | length > 0
      aws_rds:
        db_instance_identifier: "{{ rds_instance_id }}"
        apply_immediately: yes
      register: rds_apply

    - name: Send email alert after applying maintenance
      mail:
        host: "{{ email_smtp_server }}"
        port: "{{ email_smtp_port }}"
        from: "{{ email_sender }}"
        to: "{{ email_recipients }}"
        subject: "{{ email_subject_prefix }} RDS Maintenance Applied on {{ rds_instance_id }}"
        body: |
          The pending maintenance actions have been successfully applied to RDS instance {{ rds_instance_id }}.
          
          Maintenance Details:
          {{ rds_apply | to_nice_json }}
      when: pending_maintenance | length > 0

      https://www.udemy.com/course/100-days-of-code/learn/lecture/17824302#overview

      Master Python by building 100 projects in 100 days. Learn data science, automation, build websites, games and apps!



      Introduction to MicroK8s Deployment in Your Infrastructure
MicroK8s is a lightweight, single-package Kubernetes distribution developed by Canonical, designed to deploy and manage Kubernetes clusters with minimal overhead. It is particularly suitable for scenarios where ease of deployment, reduced resource consumption, and minimal setup time are critical. The simplicity of MicroK8s, coupled with its ability to provide a full Kubernetes environment, makes it an excellent choice for development, testing, and production workloads in various cloud and on-premise environments.

Overview of Your MicroK8s Infrastructure
Based on the provided documentation and screenshots, your MicroK8s deployment is tailored to the requirements of your organization, supporting both development and production environments with a focus on high availability (HA) and fault tolerance.

Inventory Management:

The inventory details in your infrastructure are managed under a YAML file (e.g., inv_development.yml). This file organizes servers into specific groups such as masters, workers, and kops_hosts. Each group contains relevant hostnames and roles, facilitating dynamic inventory management.
Master and Worker Node Configuration:

Your setup consists of both master and worker nodes distributed across multiple availability zones. This distribution helps ensure that your system is resilient to failures and can handle workloads efficiently. The master nodes are configured to be part of an HA cluster, while worker nodes are provisioned to handle application workloads.
DNS and Load Balancing:

A DNS round-robin configuration (kube-api-dev02) is used for load balancing the Kubernetes API servers across master nodes. This approach ensures that the load is evenly distributed, and failover mechanisms are in place in case of node failures.
Ansible Playbooks and Group Vars:

Your infrastructure leverages Ansible playbooks for automating the deployment and configuration of MicroK8s clusters. The playbooks include specific group variables for different environments, such as dev02_microk8s_master.yml for master nodes and dev02_microk8s_worker.yml for worker nodes. These files define key parameters like instance type, AMI details, and managed secrets.
Automation and Provisioning:

EC2 instances are provisioned using Ansible templates, which automate the creation and setup of instances in your AWS environment. The templates define the necessary steps to deploy hosts, install required components, and configure the software environment.
Testing and Validation:

Test cases are executed to validate the MicroK8s installation and configuration process. For instance, running the microk8s-install and configure (develop) job verifies that the setup is correct and that DNS records are properly created in the IPA (Identity, Policy, Audit) system for each master node's IP address.
Production Use Case:

In your production environment, the infrastructure consists of multiple master nodes and worker nodes, with specific roles assigned to each. The configuration ensures that the system can handle production workloads efficiently and reliably.
This deployment strategy highlights a well-architected approach to managing Kubernetes clusters, ensuring high availability, scalability, and robust automation practices within your organization.
